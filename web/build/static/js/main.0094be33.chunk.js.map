{"version":3,"sources":["utils/theme/base.ts","utils/components/Main/Main.styles.ts","utils/components/Main/Main.component.tsx","auth/components/RouteWrapper/RouteWrapper.styles.ts","auth/components/RouteWrapper/RouteWrapper.component.tsx","auth/components/Title/Title.styles.ts","auth/components/Title/Title.component.tsx","app/root/hooks.ts","utils/components/TextFormField/TextFormField.component.tsx","constants/api.ts","auth/ducks/auth.slice.ts","app/root/rest.ts","auth/components/LoginForm/LoginForm.styles.ts","auth/components/LoginForm/LoginForm.component.tsx","auth/components/Login/Login.component.tsx","utils/components/UploadButton/UploadButton.styles.ts","utils/components/UploadButton/UploadButton.component.tsx","feelings/components/FeelingForm/FeelingForm.styles.ts","feelings/ducks/feeling.slice.ts","feelings/components/FeelingForm/FeelingForm.component.tsx","feelings/components/CreateFeeling/CreateFeeling.styles.tsx","feelings/components/CreateFeeling/CreateFeeling.component.tsx","feelings/components/FeelingItem/FeelingItem.styles.ts","feelings/components/FeelingItem/FeelingItem.component.tsx","feelings/components/FeelingList/DeleteConfirmationModal.component.tsx","feelings/components/FeelingList/FeelingList.styles.ts","feelings/components/FeelingList/FeelingList.component.tsx","app/components/Routes/Routes.component.tsx","app/root/store.ts","app/components/Root/Root.component.tsx","index.tsx"],"names":["customTheme","createTheme","overrides","MuiCssBaseline","body","display","flexDirection","flexGrow","top","bottom","left","right","position","height","theme","responsiveFontSizes","useStyles","makeStyles","createStyles","main","maxWidth","Main","children","classes","className","component","role","breakpoints","palette","spacing","root","backgroundColor","background","default","up","paper","paddingBottom","paddingLeft","paddingRight","paddingTop","RouteWrapper","useTheme","isAtLeastSmallViewport","useMediaQuery","bgcolor","margin","marginBottom","marginTop","width","elevation","typography","h1","fontSize","h6","fontWeight","fontWeightMedium","Title","justifyContent","variant","useAppDispatch","useDispatch","useAppSelector","useSelector","useDidMountEffect","func","deps","didMount","useRef","useEffect","current","TextFormField","field","form","hideMargin","id","props","hasError","touched","name","errors","errorText","fieldToTextField","error","fullWidth","helperText","size","config","url","login","createAsyncThunk","a","username","axios","API","method","data","identifier","trim","refreshToken","accessToken","token","defaults","headers","common","authSlice","createSlice","initialState","status","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","loading","alignItems","loginSchema","yup","shape","required","loginDefaultSchema","LoginForm","history","useHistory","enqueueSnackbar","useSnackbar","dispatch","auth","replace","handleSubmit","_","initialValues","onSubmit","validationSchema","MoveFocusInside","label","color","disableElevation","type","Login","input","UploadButton","onChange","accept","htmlFor","avatar","button","image","feelingAdapter","createEntityAdapter","selectId","feeling","_id","feelingTypeAdapter","code","feelings","getInitialState","deleteStatus","feelingTypes","feelingUpsertStatus","feelingFecthStatus","selectedFeeling","fetchFeelings","fetchFeelingTypes","deleteFeeling","fetchFeeling","castedFeeling","feelingPicture","fileName","createOrUpdateFeeling","picture","getState","entities","deletePicture","dataImg","FormData","append","setAll","updateOne","meta","arg","changes","removeOne","feelingSchema","title","shortDescription","feelingDescription","defaultSchema","FeelingForm","useParams","upsertStatus","useState","feelingDefaultSchema","setFeelingDefaultSchema","imagePreview","setImagePreview","feelingType","setSubmitting","enableReinitialize","values","handleChange","setFieldValue","marginY","multiline","rows","value","control","alt","src","event","target","files","URL","createObjectURL","edge","onClick","container","errorIcon","CreateFeeling","fetchStatus","goBack","cursor","FeelingItem","onDeleteFeeling","push","primary","secondary","Date","created","toLocaleDateString","evt","feel","stopPropagation","DeleteConfirmationModal","handleClose","keepMounted","onClose","open","FeelingList","feelingArray","Object","feelingToDelete","setFeelingToDelete","length","map","RestrictedRoute","path","Component","render","to","Routes","exact","store","configureStore","reducer","Root","ThemeProvider","maxSnack","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0094be33.chunk.js","sourcesContent":["import { createTheme, responsiveFontSizes } from '@material-ui/core/styles';\n\nconst customTheme = createTheme({\n  overrides: {\n    MuiCssBaseline: {\n      '@global': {\n        body: {\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1,\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0,\n          position: 'absolute'\n        },\n        '#root': {\n          display: 'flex',\n          flexDirection: 'column',\n          flexGrow: 1\n        },\n        '[role=main]': {\n          flexGrow: 1,\n          height: 'auto',\n          display: 'flex',\n          flexDirection: 'column'\n        }\n      }\n    }\n  }\n});\n\nexport const theme = responsiveFontSizes(customTheme);\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() =>\n  createStyles({\n    main: {\n      maxWidth: '100vw'\n    }\n  })\n);\n","import { ReactNode } from 'react';\nimport { Box } from '@material-ui/core';\nimport { useStyles } from './Main.styles';\n\nexport type MainProps = { children: ReactNode };\n\nconst Main = ({ children }: MainProps) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.main} component=\"main\" display=\"flex\" flexDirection=\"column\" role=\"main\">\n      {children}\n    </Box>\n  );\n};\n\nexport default Main;\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(({ breakpoints, palette, spacing }) =>\n  createStyles({\n    root: {\n      backgroundColor: palette.background.default,\n      [breakpoints.up('sm')]: {\n        backgroundColor: palette.background.paper,\n        paddingBottom: spacing(3),\n        paddingLeft: spacing(4),\n        paddingRight: spacing(4),\n        paddingTop: spacing(3)\n      }\n    }\n  })\n);\n","import { ReactNode } from 'react';\nimport { Box, Paper, useMediaQuery } from '@material-ui/core';\nimport { useTheme } from '@material-ui/core/styles';\nimport { useStyles } from './RouteWrapper.styles';\n\nexport type RouteWrapperProps = {\n  children: ReactNode;\n};\n\nconst RouteWrapper = ({ children }: RouteWrapperProps) => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const isAtLeastSmallViewport = useMediaQuery(theme.breakpoints.up('sm'));\n\n  return (\n    <Box bgcolor=\"transparent\" margin=\"auto\" marginBottom={[3, 5]} marginTop={10} width={[1, 400]}>\n      <Paper className={classes.root} elevation={isAtLeastSmallViewport ? 1 : 0}>\n        {children}\n      </Paper>\n    </Box>\n  );\n};\n\nexport default RouteWrapper;\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(({ typography }) =>\n  createStyles({\n    h1: {\n      fontSize: typography.h6.fontSize,\n      fontWeight: typography.fontWeightMedium\n    }\n  })\n);\n","import { ReactNode } from 'react';\nimport { Box, Typography } from '@material-ui/core';\nimport { useStyles } from './Title.styles';\n\nexport type TitleProps = {\n  children: ReactNode;\n};\n\nconst Title = ({ children }: TitleProps) => {\n  const classes = useStyles();\n\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" marginBottom={3} marginTop={[1, 0]}>\n      <Typography className={classes.h1} variant=\"h1\">\n        {children}\n      </Typography>\n    </Box>\n  );\n};\n\nexport default Title;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\nimport { useEffect, useRef } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\nexport const useDidMountEffect = (func: any, deps: any[]) => {\n  const didMount = useRef(false);\n\n  useEffect(() => {\n    if (didMount.current) func();\n    else didMount.current = true;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, deps);\n};\n\nexport const usePrevious = (value: any) => {\n  const ref = useRef();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport const useQuery = () => new URLSearchParams(useLocation().search);\n","import { fieldToTextField, TextFieldProps } from 'formik-material-ui';\nimport { Box, TextField } from '@material-ui/core';\n\nexport type TextFormFieldProps = TextFieldProps & {\n  hideMargin?: boolean;\n  id: string;\n};\n\nconst TextFormField = ({ field, form, hideMargin = false, id, ...props }: TextFormFieldProps) => {\n  const hasError = form.touched[field.name] && !!form.errors[field.name];\n  const errorText = hasError ? form.errors[field.name] : '';\n\n  return (\n    <Box marginBottom={hideMargin ? 0 : 3}>\n      <TextField\n        {...fieldToTextField({ field, form, ...props })}\n        error={hasError}\n        fullWidth\n        helperText={errorText}\n        id={id}\n        size=\"small\"\n        variant=\"outlined\"\n      />\n    </Box>\n  );\n};\n\nexport default TextFormField;\n","type API = {\n  url: string;\n};\n\nconst config: API = {\n  url: 'https://feeling-api-h2uvb.ondigitalocean.app/api/v1'\n};\n\nexport default config;\n","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport API from 'constants/api';\nimport { AuthStateSchema } from 'auth/models/login';\nimport { setAuthToken } from 'app/root/rest';\n\nconst initialState: AuthStateSchema = {\n  accessToken: null,\n  refreshToken: null,\n  status: 'idle',\n  error: null,\n  username: null\n};\n\nexport const login = createAsyncThunk<{ accessToken: string; refreshToken: string; username: string }, { username: string }>(\n  'auth/login',\n  async ({ username }) => {\n    const {\n      data: { refreshToken, accessToken }\n    } = await axios(`${API.url}/access`, {\n      method: 'POST',\n      data: {\n        identifier: username.trim()\n      }\n    });\n    setAuthToken(accessToken);\n    return {\n      refreshToken,\n      accessToken,\n      username\n    };\n  }\n);\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(login.pending, state => {\n      state.status = 'logging';\n    });\n    builder.addCase(login.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.accessToken = action.payload.accessToken;\n      state.refreshToken = action.payload.refreshToken;\n      state.username = action.payload.username;\n    });\n    builder.addCase(login.rejected, state => {\n      state.status = 'failed';\n    });\n  }\n});\n\nexport default authSlice.reducer;\n","import axios from 'axios';\n\nexport const setAuthToken = (token: string) => {\n  if (token) {\n    axios.defaults.headers.common['x-access-token'] = `${token}`;\n  }\n};\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() =>\n  createStyles({\n    loading: {\n      height: 42,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  })\n);\n","import { MoveFocusInside } from 'react-focus-lock';\nimport { useHistory } from 'react-router-dom';\nimport { Field, Form, Formik } from 'formik';\nimport * as yup from 'yup';\nimport { Box, Button, CircularProgress } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\n\nimport type { LoginFormSchema } from 'auth/models/login';\nimport { useAppDispatch, useAppSelector, useDidMountEffect } from '../../../app/root/hooks';\nimport TextFormField from 'utils/components/TextFormField';\nimport { login } from '../../ducks/auth.slice';\nimport { useStyles } from './LoginForm.styles';\n\nconst loginSchema = yup.object().shape<LoginFormSchema>({\n  username: yup.string().required('Username is required')\n});\n\nconst loginDefaultSchema: LoginFormSchema = {\n  username: ''\n};\n\nconst LoginForm = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const dispatch = useAppDispatch();\n  const status = useAppSelector(state => state.auth.status);\n\n  useDidMountEffect(() => {\n    if (status === 'failed') enqueueSnackbar('An error has been occurred, please try again later.', { variant: 'error'});\n    else if (status === 'succeeded') history.replace('/feelings');\n  },[status]);\n\n  const handleSubmit = async (_: LoginFormSchema) => {\n    void dispatch(login({ username: _.username }));\n  };\n\n  return (\n    <Formik initialValues={loginDefaultSchema} onSubmit={handleSubmit} validationSchema={loginSchema}>\n      <Form>\n        <MoveFocusInside>\n          <Field component={TextFormField} id=\"username\" label=\"Username\" name=\"username\" />\n        </MoveFocusInside>\n        {status === 'logging' &&\n          <Box className={classes.loading}>\n            <CircularProgress size={24}/>\n          </Box>\n        }\n        {status !== 'logging' &&\n          <Button color=\"primary\" disableElevation fullWidth size=\"large\" type=\"submit\" variant=\"contained\">\n            Login\n          </Button>\n        }\n      </Form>\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","import { Container } from '@material-ui/core';\nimport Main from 'utils/components/Main';\nimport RouteWrapper from 'auth/components/RouteWrapper';\nimport Title from 'auth/components/Title';\nimport LoginForm from 'auth/components/LoginForm';\n\nconst Login = () => (\n  <Container>\n    <Main>\n      <RouteWrapper>\n        <Title>Feeling App</Title>\n        <LoginForm />\n      </RouteWrapper>\n    </Main>\n  </Container>\n);\n\nexport default Login;\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(({ spacing }) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: spacing(1)\n      }\n    },\n    input: {\n      display: 'none'\n    },\n    label: {\n      margin: 0\n    }\n  })\n);\n","import { ChangeEvent } from 'react';\nimport { Box, Button } from '@material-ui/core';\nimport { useStyles } from './UploadButton.styles';\n\nexport type UploadButtonProps = {\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\n};\n\nconst UploadButton = ({ onChange }: UploadButtonProps) => {\n  const classes = useStyles();\n\n  return (\n    <Box className={classes.root}>\n      <input accept=\"image/*\" className={classes.input} id=\"contained-button-file\" onChange={onChange} type=\"file\" />\n      <label className={classes.label} htmlFor=\"contained-button-file\">\n        <Button color=\"primary\" component=\"span\" variant=\"contained\">\n          Upload a picture about your feeling\n        </Button>\n      </label>\n    </Box>\n  );\n};\n\nexport default UploadButton;\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() =>\n  createStyles({\n    avatar: {\n      width: 100,\n      height: 100,\n      margin: 24\n    },\n    button: {\n      marginBottom: 24\n    },\n    loading: {\n      height: 42,\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: 'flex-start'\n    },\n    image: {\n      maxWidth: '100%',\n      height: 'auto'\n    }\n  })\n);\n","import { createSlice, createAsyncThunk, createEntityAdapter } from '@reduxjs/toolkit';\nimport axios from 'axios';\nimport { Feeling, FeelingState, FeelingStatus, FeelingType } from 'feelings/models/feeling';\nimport API from 'constants/api';\nimport { RootState } from 'app/root/store';\n\ntype RestFeeling = {\n  _id?: string;\n  title: string;\n  type: string;\n  shortDescription: string;\n  feelingDescription: string;\n  feelingPicture?: {\n    fileName: string;\n  };\n  deletePicture?: boolean\n};\n\nconst feelingAdapter = createEntityAdapter<Feeling>({\n  selectId: feeling => feeling._id\n});\n\nconst feelingTypeAdapter = createEntityAdapter<FeelingType>({\n  selectId: feeling => feeling.code\n});\n\nconst initialState: FeelingState = {\n  feelings: feelingAdapter.getInitialState<FeelingStatus>({\n    status: 'idle'\n  }),\n  deleteStatus: 'idle',\n  feelingTypes: feelingTypeAdapter.getInitialState(),\n  feelingUpsertStatus: 'idle',\n  feelingFecthStatus: 'idle',\n  selectedFeeling: null\n};\n\nexport const fetchFeelings = createAsyncThunk<Feeling[]>('feeling/fetchFeelings', async () => {\n  const {\n    data: { feelings }\n  } = await axios(`${API.url}/feelings`);\n  return feelings;\n});\n\nexport const fetchFeelingTypes = createAsyncThunk<FeelingType[]>('feeling/fetchFeelingTypes', async () => {\n  const {\n    data: { feelingTypes }\n  } = await axios(`${API.url}/feeling_types`);\n  return feelingTypes;\n});\n\nexport const deleteFeeling = createAsyncThunk<string, { identifier: string }>('feeling/deleteFeeling', async ({ identifier }) => {\n  await axios({ url: `${API.url}/feelings/${identifier}`, method: 'DELETE' });\n  return identifier;\n});\n\nexport const fetchFeeling = createAsyncThunk<Feeling, { identifier: string }>('feeling/fetchFeeling', async ({ identifier }) => {\n  const { data: { feeling } } = await axios({ url: `${API.url}/feelings/${identifier}`, method: 'GET' });\n  const castedFeeling = feeling as Feeling;\n  if (castedFeeling.feelingPicture) {\n    const { data: { url } } = await axios({ url: `${API.url}/files/${castedFeeling.feelingPicture.fileName}`, method: 'GET' });\n    castedFeeling.feelingPicture.fileName = url;\n  }\n  return castedFeeling;\n});\n\nexport const createOrUpdateFeeling = createAsyncThunk<boolean, { feeling: RestFeeling; picture: any }, { state: RootState }>(\n  'feeling/createOrUpdateFeeling',\n  async ({ feeling, picture }, { getState }) => {\n    const feelingTypes = getState().feeling.feelingTypes.entities;\n    let url = `${API.url}/feelings`;\n    const method = feeling._id === 'new' ? 'POST' : 'PUT';\n    if (feeling._id !== 'new') url += `/${feeling._id}`;\n    if (feeling._id === 'new') delete feeling.deletePicture;\n    delete feeling._id;\n\n    if (picture && typeof picture !== 'string') {\n      const dataImg = new FormData();\n      dataImg.append('file', picture);\n      const {\n        data: { fileName }\n      } = await axios({\n        method: 'POST',\n        url: `${API.url}/files`,\n        data: dataImg,\n        headers: { 'Content-Type': 'multipart/form-data' }\n      });\n      feeling.feelingPicture = {\n        fileName\n      };\n    }\n\n    feeling.type = feelingTypes[feeling.type]?._id ?? '';\n    await axios({\n      url,\n      method,\n      data: feeling\n    });\n    return true;\n  }\n);\n\nconst authSlice = createSlice({\n  name: 'feeling',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchFeelings.pending, state => {\n      state.feelings.status = 'searching';\n    });\n    builder.addCase(fetchFeelings.fulfilled, (state, action) => {\n      state.feelings.status = 'succeeded';\n      feelingAdapter.setAll(state.feelings, action.payload);\n    });\n    builder.addCase(fetchFeelings.rejected, state => {\n      state.feelings.status = 'failed';\n    });\n    builder.addCase(deleteFeeling.pending, (state, action) => {\n      state.deleteStatus = 'deleting';\n      feelingAdapter.updateOne(state.feelings, { id: action.meta.arg.identifier, changes: { deleteStatus: 'deleting' } });\n    });\n    builder.addCase(deleteFeeling.fulfilled, (state, action) => {\n      state.deleteStatus = 'succeeded';\n      feelingAdapter.removeOne(state.feelings, action.payload);\n    });\n    builder.addCase(deleteFeeling.rejected, state => {\n      state.deleteStatus = 'failed';\n    });\n    builder.addCase(fetchFeelingTypes.fulfilled, (state, action) => {\n      feelingTypeAdapter.setAll(state.feelingTypes, action.payload);\n    });\n    builder.addCase(fetchFeelingTypes.rejected, state => {\n      feelingTypeAdapter.setAll(state.feelingTypes, []);\n    });\n    builder.addCase(createOrUpdateFeeling.rejected, state => {\n      state.feelingUpsertStatus = 'failed';\n    });\n    builder.addCase(createOrUpdateFeeling.fulfilled, state => {\n      state.feelingUpsertStatus = 'succeeded';\n    });\n    builder.addCase(createOrUpdateFeeling.pending, state => {\n      state.feelingUpsertStatus = 'saving';\n    });\n    builder.addCase(fetchFeeling.rejected, state => {\n      state.feelingFecthStatus = 'failed';\n    });\n    builder.addCase(fetchFeeling.fulfilled, (state, action) => {\n      state.feelingFecthStatus = 'succeeded';\n      state.selectedFeeling = action.payload;\n    });\n    builder.addCase(fetchFeeling.pending, state => {\n      state.feelingFecthStatus = 'searching';\n    });\n  }\n});\n\nexport default authSlice.reducer;\n","import { ChangeEvent, useState } from 'react';\nimport { Field, Form, Formik, FormikHelpers } from 'formik';\nimport * as yup from 'yup';\nimport { Avatar, Box, Button, CircularProgress, FormControlLabel, IconButton, Radio, RadioGroup } from '@material-ui/core';\nimport { CloseOutlined } from '@material-ui/icons';\nimport { useParams } from 'react-router-dom';\n\nimport UploadButton from 'utils/components/UploadButton';\nimport TextFormField from 'utils/components/TextFormField';\nimport type { FeelingFormSchema } from 'feelings/models/feeling';\nimport { useStyles } from './FeelingForm.styles';\nimport { useAppDispatch, useAppSelector } from 'app/root/hooks';\nimport { createOrUpdateFeeling } from 'feelings/ducks/feeling.slice';\nimport { useEffect } from 'react';\n\ntype QuizParams = {\n  identifier: string;\n};\n\nconst feelingSchema = yup.object().shape<FeelingFormSchema>({\n  title: yup.string().required('Title is required'),\n  type: yup.string().required('Type is required'),\n  shortDescription: yup.string().required('Short description is required'),\n  feelingDescription: yup.string(),\n  image: yup.mixed()\n});\n\nconst defaultSchema: FeelingFormSchema = {\n  title: '',\n  type: 'happy',\n  image: null,\n  shortDescription: '',\n  feelingDescription: ''\n};\n\nconst FeelingForm = () => {\n  const classes = useStyles();\n  const { identifier } = useParams<QuizParams>();\n  const dispatch = useAppDispatch();\n  const upsertStatus = useAppSelector(state => state.feeling.feelingUpsertStatus);\n  const selectedFeeling = useAppSelector(state => state.feeling.selectedFeeling);\n\n  const [feelingDefaultSchema, setFeelingDefaultSchema] = useState<FeelingFormSchema>(defaultSchema);\n  const [imagePreview, setImagePreview] = useState<string>('');\n\n  useEffect(() => {\n    if (identifier !== 'new' && selectedFeeling) {\n      const feeling: FeelingFormSchema = {\n        title: selectedFeeling.title,\n        type: selectedFeeling.feelingType.code,\n        image: null,\n        shortDescription: selectedFeeling.shortDescription,\n        feelingDescription: selectedFeeling.feelingDescription\n      };\n\n      if (selectedFeeling.feelingPicture) {\n        feeling.image = 'existing';\n        setImagePreview(selectedFeeling.feelingPicture.fileName);\n      }\n      setFeelingDefaultSchema(feeling);\n    };\n  }, [selectedFeeling, identifier]);\n\n  const handleSubmit = async (_: FeelingFormSchema, { setSubmitting }: FormikHelpers<FeelingFormSchema>) => {\n    setSubmitting(false);\n    const feeling = {\n      _id: identifier,\n      title: _.title,\n      type: _.type,\n      shortDescription: _.shortDescription,\n      feelingDescription: _.feelingDescription,\n      deletePicture: false\n    };\n\n    if (identifier !== 'new' && selectedFeeling && selectedFeeling?.feelingPicture && !_.image) feeling.deletePicture = true;\n    void dispatch(createOrUpdateFeeling({ feeling, picture: _.image}));\n  };\n\n  return (\n    <Formik enableReinitialize initialValues={feelingDefaultSchema} onSubmit={handleSubmit} validationSchema={feelingSchema}>\n      {({ values, handleChange, setFieldValue }) => (\n        <Form>\n          <Box display=\"flex\" flexDirection=\"row\" marginY={3}>\n            <Box display=\"flex\" flexDirection=\"column\" flexGrow={1} paddingRight={10}>\n              <Field component={TextFormField} id=\"title\" label=\"Title\" name=\"title\" required/>\n              <Field component={TextFormField} id=\"shortDescription\" label=\"Short description feeling\" multiline name=\"shortDescription\" required rows={2}/>\n            </Box>\n            <RadioGroup aria-label=\"type\" name=\"type\" onChange={handleChange} value={values.type}>\n              <Box alignItems=\"center\" display=\"flex\" flexDirection=\"row\">\n                <Box display=\"flex\" flexDirection=\"column\">\n                  <FormControlLabel control={<Radio />} label=\"Happy\" value=\"happy\" />\n                  <FormControlLabel control={<Radio />} label=\"Sad\" value=\"sad\" />\n                  <FormControlLabel control={<Radio />} label=\"Furious\" value=\"furious\" />\n                  <FormControlLabel control={<Radio />} label=\"Angry\" value=\"angry\" />\n                </Box>\n                <Box display=\"flex\" flexDirection=\"column\">\n                  <FormControlLabel control={<Radio />} label=\"Bored\" value=\"bored\" />\n                  <FormControlLabel control={<Radio />} label=\"Love\" value=\"in_love\" />\n                  <FormControlLabel control={<Radio />} label=\"Scared\" value=\"scared\" />\n                  <FormControlLabel control={<Radio />} label=\"Sleepy\" value=\"sleepy\" />\n                </Box>\n                <Avatar alt=\"Remy Sharp\" className={classes.avatar} src={`/assets/${values.type}.png`} />\n              </Box>\n            </RadioGroup>\n          </Box>\n          <Field component={TextFormField} id=\"feelingDescription\" label=\"Feeling description\" multiline name=\"feelingDescription\" rows={5}/>\n          {!imagePreview &&\n            <Box marginY={3}>\n              <UploadButton\n                onChange={(event: ChangeEvent<HTMLInputElement>) => {\n                  setFieldValue('image', event.target.files?.[0]);\n                  setImagePreview(URL.createObjectURL(event.target.files?.[0]));\n                }}\n              />\n            </Box>\n          }\n          {!!imagePreview &&\n            <Box alignItems=\"flex-start\" display=\"flex\" flexDirection=\"column\" marginY={3}>\n              <IconButton\n                aria-label=\"deleetImage\"\n                edge=\"end\"\n                onClick={() => {\n                  setFieldValue('image', '');\n                  setImagePreview('');\n                }}>\n                <CloseOutlined color=\"secondary\"/>\n              </IconButton>\n              <img alt=\"feeling-description\" className={classes.image} src={imagePreview} />\n            </Box>\n          }\n          {upsertStatus === 'saving' &&\n            <Box alignItems=\"center\" display=\"flex\" height={42} justifyContent=\"flex-start\" marginBottom={24}>\n              <CircularProgress size={24}/>\n            </Box>\n          }\n          {upsertStatus !== 'saving' &&\n            <Button className={classes.button} color=\"primary\" disableElevation size=\"large\" type=\"submit\" variant=\"contained\">\n              {identifier === 'new' ? 'Create' : 'Update' }\n            </Button>\n          }\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default FeelingForm;\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1\n    },\n    errorIcon: {\n      height: 82,\n      width: 82\n    }\n  })\n);\n","import { Box, CircularProgress, Container, Typography } from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport FeelingForm from 'feelings/components/FeelingForm';\nimport { useAppSelector, useDidMountEffect } from 'app/root/hooks';\nimport { ErrorOutlineOutlined } from '@material-ui/icons';\nimport { useStyles } from './CreateFeeling.styles';\n\ntype QuizParams = {\n  identifier: string;\n};\n\nconst CreateFeeling = () => {\n  const { enqueueSnackbar } = useSnackbar();\n  const history = useHistory();\n  const classes = useStyles();\n  const { identifier } = useParams<QuizParams>();\n  const upsertStatus = useAppSelector(state => state.feeling.feelingUpsertStatus);\n  const fetchStatus = useAppSelector(state => state.feeling.feelingFecthStatus);\n\n  useDidMountEffect(() => {\n    if (upsertStatus === 'failed') enqueueSnackbar('An error has been occurred, please try again later.', { variant: 'error'});\n    else if (upsertStatus === 'succeeded') {\n      enqueueSnackbar('Feeling has been saved successfully.', { variant: 'success'});\n      history.goBack();\n    }\n  },[upsertStatus]);\n\n  return (\n    <Container className={classes.container}>\n      {fetchStatus === 'searching' &&\n        <Box alignItems=\"center\" display=\"flex\" flexGrow={1} height={42} justifyContent=\"center\" marginBottom={24}>\n          <CircularProgress size={24}/>\n        </Box>\n      }\n      {fetchStatus === 'failed' &&\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"column\" flexGrow={1} justifyContent=\"center\">\n          <ErrorOutlineOutlined className={classes.errorIcon} color=\"error\"/>\n          <Box>An Error has been occurred, please try later.</Box>\n        </Box>\n      }\n      {fetchStatus !== 'searching' &&\n        <>\n          <Box marginBottom={4} marginTop={8}>\n            <Typography component=\"h1\" variant=\"h6\">{identifier !== 'new' ? 'Update your feeling' : 'Create a feeling'}</Typography>\n          </Box>\n          <FeelingForm />\n        </>\n      }\n    </Container>\n  );\n};\n\nexport default CreateFeeling;\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() =>\n  createStyles({\n    paper: {\n      cursor: 'pointer'\n    }\n  })\n);\n","import { useHistory } from 'react-router-dom';\nimport { Avatar, Box, CircularProgress, IconButton, ListItem, ListItemAvatar, ListItemSecondaryAction, ListItemText, Paper } from '@material-ui/core';\nimport { DeleteOutline } from '@material-ui/icons';\n\nimport { Feeling } from 'feelings/models/feeling';\nimport { useStyles } from './FeelingItem.styles';\nimport { fetchFeeling } from 'feelings/ducks/feeling.slice';\nimport { useAppDispatch } from 'app/root/hooks';\n\ntype FeelingItemType = {\n  feeling: Feeling;\n  onDeleteFeeling: (feeling: Feeling) => void;\n};\n\nconst FeelingItem = ({ feeling, onDeleteFeeling }: FeelingItemType) => {\n  const history = useHistory();\n  const classes = useStyles();\n  const dispatch = useAppDispatch();\n\n  const handleClick = () => {\n    void dispatch(fetchFeeling({ identifier: feeling._id }));\n    history.push(`/feelings/${feeling._id}`);\n  };\n\n  const deleteFeeling = (evt: any, feel: Feeling) => {\n    evt.stopPropagation();\n    onDeleteFeeling(feel);\n  };\n\n  return (\n    <Box marginY={2}>\n      <Paper className={classes.paper} onClick={handleClick}>\n        <ListItem>\n          <ListItemAvatar>\n            <Avatar alt=\"Remy Sharp\" src={`/assets/${feeling.feelingType.code}.png`} />\n          </ListItemAvatar>\n          <ListItemText primary={feeling.title} secondary={`${feeling.shortDescription} - ${new Date(feeling.created).toLocaleDateString('en-US')}`} />\n          <ListItemSecondaryAction>\n            {feeling?.deleteStatus === 'deleting' &&\n              <CircularProgress size={28}/>\n            }\n            {feeling?.deleteStatus !== 'deleting' &&\n              <IconButton aria-label=\"comments\" edge=\"end\" onClick={evt => deleteFeeling(evt, feeling)}>\n                <DeleteOutline color=\"secondary\"/>\n              </IconButton>\n            }\n          </ListItemSecondaryAction>\n        </ListItem>\n      </Paper>\n    </Box>\n  );\n};\n\nexport default FeelingItem;\n","import { Button, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle } from '@material-ui/core';\n\ntype DialogType = {\n  handleClose: () => void;\n  deleteFeeling: () => void;\n};\n\nconst DeleteConfirmationModal = ({ handleClose, deleteFeeling }: DialogType) => (\n  <Dialog aria-describedby=\"confirmation-description\" aria-labelledby=\"confirmation-title\" keepMounted onClose={handleClose} open>\n    <DialogTitle id=\"confirmation-title\">Delete Confirmation</DialogTitle>\n    <DialogContent>\n      <DialogContentText id=\"confirmation-description\">Do you want to delete the feeling?</DialogContentText>\n    </DialogContent>\n    <DialogActions>\n      <Button color=\"primary\" onClick={handleClose}>\n        NO\n      </Button>\n      <Button color=\"primary\" onClick={deleteFeeling}>\n        Yes\n      </Button>\n    </DialogActions>\n  </Dialog>\n);\n\nexport default DeleteConfirmationModal;\n","import { createStyles, makeStyles } from '@material-ui/core/styles';\n\nexport const useStyles = makeStyles(() =>\n  createStyles({\n    container: {\n      display: 'flex',\n      flexDirection: 'column',\n      flexGrow: 1\n    },\n    errorIcon: {\n      height: 82,\n      width: 82\n    }\n  })\n);\n","import { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Box, Button, CircularProgress, Container, List, Typography } from '@material-ui/core';\nimport { ErrorOutlineOutlined, AddCommentOutlined } from '@material-ui/icons';\n\nimport FeelingItem from 'feelings/components/FeelingItem';\nimport DeleteConfirmationModal from 'feelings/components/FeelingList/DeleteConfirmationModal.component';\nimport { useAppDispatch, useAppSelector } from 'app/root/hooks';\nimport { deleteFeeling, fetchFeelings, fetchFeelingTypes } from 'feelings/ducks/feeling.slice';\nimport { Feeling } from 'feelings/models/feeling';\nimport { useStyles } from './FeelingList.styles';\n\nconst FeelingList = () => {\n  const history = useHistory();\n  const dispatch = useAppDispatch();\n  const classes = useStyles();\n  const feelings = useAppSelector(state => state.feeling.feelings.entities);\n  const status = useAppSelector(state => state.feeling.feelings.status);\n  const feelingArray = Object.values(feelings) as Feeling[];\n\n  const [feelingToDelete, setFeelingToDelete] = useState<Feeling | null>(null);\n\n  useEffect(() => {\n    void dispatch(fetchFeelings());\n    void dispatch(fetchFeelingTypes());\n  }, [dispatch]);\n\n  const handleCreateClick = () => {\n    history.push('/feelings/new');\n  };\n\n  const deleteExistingFeeling = () => {\n    if (feelingToDelete) void dispatch(deleteFeeling({ identifier: feelingToDelete._id}));\n    setFeelingToDelete(null);\n  };\n\n  return (\n    <Container className={classes.container}>\n      <Box display=\"flex\" justifyContent=\"space-between\" marginBottom={4} marginTop={8}>\n        <Box>\n          <Typography component=\"h1\" variant=\"h6\">\n            How you have been feeling\n          </Typography>\n          <Typography component=\"h2\">Click on the feeling to see its details</Typography>\n        </Box>\n        <Button color=\"primary\" onClick={handleCreateClick} variant=\"contained\">\n          Create feeling\n        </Button>\n      </Box>\n      {status !== 'succeeded' &&\n          <Box alignItems=\"center\" display=\"flex\" flexGrow={1} justifyContent=\"center\">\n            {status === 'searching' && <CircularProgress size={32}/>}\n            {status === 'failed' &&\n              <Box alignItems=\"center\" display=\"flex\" flexDirection=\"column\" flexGrow={1} justifyContent=\"center\">\n                <ErrorOutlineOutlined className={classes.errorIcon} color=\"error\"/>\n                <Box>An Error has been occurred, please try later.</Box>\n              </Box>\n            }\n          </Box>\n      }\n      {status === 'succeeded' && !!feelingArray.length &&\n        <List>\n          {feelingArray.map(feeling => (\n            <FeelingItem feeling={feeling} key={feeling._id} onDeleteFeeling={feel => setFeelingToDelete(feel)}/>\n          ))}\n        </List>\n      }\n      {status === 'succeeded' && !feelingArray.length &&\n        <Box alignItems=\"center\" display=\"flex\" flexDirection=\"column\" flexGrow={1} justifyContent=\"center\">\n          <AddCommentOutlined className={classes.errorIcon} color=\"secondary\"/>\n          <Box>There are no feelings!</Box>\n          <Box fontWeight=\"bold\">How do you feel? Register your first feeling, tap on create feeling button</Box>\n        </Box>\n      }\n      {!!feelingToDelete && (\n        <DeleteConfirmationModal deleteFeeling={deleteExistingFeeling} handleClose={() => setFeelingToDelete(null)}/>\n      )}\n    </Container>\n  );\n};\n\nexport default FeelingList;\n","import { Route, Switch, Redirect } from 'react-router-dom';\nimport Login from 'auth/components/Login';\nimport CreateFeeling from 'feelings/components/CreateFeeling';\nimport FeelingList from 'feelings/components/FeelingList';\nimport { useAppSelector } from 'app/root/hooks';\n\nconst RestrictedRoute = ({ path, Component }: { path: string; Component: any }) => {\n  const status = useAppSelector(state => state.auth.status);\n  return (\n    <Route\n      path={path}\n      render={props => {\n        if (status !== 'succeeded') return <Redirect to=\"/login\" />;\n        return <Component {...props}/>;\n      }}\n    />\n  );\n};\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/\">\n      <Redirect to=\"/login\" />\n    </Route>\n    <Route path=\"/login\">\n      <Login />\n    </Route>\n    <RestrictedRoute Component={CreateFeeling} path=\"/feelings/:identifier\"/>\n    <RestrictedRoute Component={FeelingList} path=\"/feelings\"/>\n  </Switch>\n);\n\nexport default Routes;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport auth from 'auth/ducks/auth.slice';\nimport feeling from 'feelings/ducks/feeling.slice';\n\nexport const store = configureStore({\n  reducer: {\n    auth,\n    feeling\n  }\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, Action<string>>;\n","import { HashRouter as Router } from 'react-router-dom';\nimport { CssBaseline } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { theme } from 'utils/theme/base';\nimport { Provider } from 'react-redux';\nimport { SnackbarProvider } from 'notistack';\nimport Routes from 'app/components/Routes';\n\nimport { store } from 'app/root/store';\n\nconst Root = () => (\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <SnackbarProvider maxSnack={3}>\n        <CssBaseline />\n        <Router>\n          <Routes />\n        </Router>\n      </SnackbarProvider>\n    </ThemeProvider>\n  </Provider>\n);\n\nexport default Root;\n","import { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport Root from 'app/components/Root';\n\nReactDOM.render(\n  <StrictMode>\n    <Root />\n  </StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}